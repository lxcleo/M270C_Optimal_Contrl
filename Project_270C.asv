solinit = bvpinit(linspace(0,0.78,50), ...
[0 0 0.5 0.5]);
options = bvpset('Stats','on','RelTol',1e-1);
global R;
R = 0.1;
sol = bvp4c(@BVP_ode, @BVP_bc, solinit, options);
t = sol.x;
y = sol.y;
% Calculate u(t) from x1,x2,p1,p2
ut = (y(3,:).*(y(1,:) + 1/4))/(2*0.1);
n = length(t);
% Calculate the cost
J = 0.78*(y(1,:)*y(1,:)' + y(2,:)*y(2,:)' + ...
ut*ut'*0.1)/n;
%% 
clear all
syms x y z psi theta phi alpha beta ...
    x_d y_d z_d psi_d theta_d phi_d alpha_d beta_d ...
    p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 ...
    p12 p13 p14 p15 p16 u1 u2 u3 u4 real;
q = [x y z psi theta phi alpha beta]'; 
zeta = [x y z]';
neta = [psi theta phi]';
miu = [alpha beta]';
q_d = [x_d y_d z_d psi_d theta_d phi_d  alpha_d beta_d]';
zeta_d = [x_d y_d z_d]';
neta_d = [psi_d theta_d phi_d]';
miu_d = [alpha_d beta_d]';
ml = 0.3; % Mass of the load
M_quad = 0.56; % Mass of the quadrotor
l = 0.242; % Length of the quadrotor 
m11 = M_quad + ml;
m22 = m11;
m33 = m11;
m17 = ml * l * cos(alpha) * sin(beta);
m71 = m17;
m18 = -ml * l * sin(alpha) * sin(beta);
m81 = m18;
m27 = ml * l * cos(alpha) * sin(beta);
m72 = m27;
m28 = ml * l * sin(alpha) * cos(beta);
m82 = m28;
m37 = ml * l * sin(alpha);
m73 = m37;
I_psi = 1;
I_theta = 0.5;
I_phi = 0.5;

m44 = I_psi * sin(theta)^2 + cos(theta)^2 * (I_theta * sin(theta)^2 ...
    + I_phi * cos(phi)^2);
m45 = (I_theta - I_phi)* (cos(theta) * sin(phi) * cos(phi));
m54 = m45;
m55 = I_theta * cos(phi)^2 + I_phi * sin(phi)^2;
m77 = ml * l^2;
m88 = ml * l^2 * sin(alpha)^2;
M = [m11 0 0 0 0 0 m17 m18; ...
    0 m22 0 0 0 0 m27 m28; ...
    0 0 m33 0 0 0 m37 0; ...
    0 0 0 m44 m45 -I_psi * sin(alpha) 0 0;...
    0 0 0 m54 m55 0 0 0;...
    0 0 0 -I_psi * sin(theta) 0 I_psi 0 0;...
    m71 m72 m73 0 0 0 m77 0;...
    m81 m82 0 0 0 0 0 m88];
c17 = -ml * l * (cos(alpha) * sin(beta) * beta_d + sin(alpha)...
    * cos(beta) * alpha_d);
c18 = -ml * l *(cos(alpha) * sin(beta) * alpha_d + sin(alpha)...
    * cos(beta) * beta_d);
c27 = ml * l * (cos(alpha) * cos(beta) * beta_d - sin(alpha) ...
     * sin(beta) * alpha_d);
c28 = ml * l * (cos(alpha) * cos(beta) * alpha_d - sin(alpha) ...
     * sin(beta) * beta_d);
c44 = I_psi * theta_d * sin(theta) * cos(theta) - (I_theta + ...
    I_phi) * (theta_d * sin(theta) * cos(theta) * sin(theta)^2);
c45 = I_psi * psi_d * sin(theta) * cos(theta) - (I_theta + I_phi)...
    *(psi_d^2 * sin(theta) * cos(theta) * cos(theta)^2 - phi_d * ...
    cos(theta) * cos(phi)^2);
c46 = -(I_psi * theta_d * cos(theta));
c54 = psi_d * sin(theta) * cos(theta) * (-I_psi + I_theta * sin(theta)^2 ...
    + I_phi * cos(phi)^2);
c55 = 0;
c56 = I_psi * psi_d * cos(theta);
c64 = 0;
c65 = -I_psi * psi_d * cos(theta);
C = [0 0 0 0 0 0 c17 c18;...
    0 0 0 0 0 0 c27 c28; ...
    0 0 0 0 0 0 ml * l * cos(alpha) * alpha_d 0;...
    0 0 0 c44 c46 c46 0 0;...
    0 0 0 c54 c55 c56 0 0;...
    0 0 0 c64 c65 0 0 0;...
    0 0 0 0 0 0 0 -ml * l^2 * sin(alpha) * cos(beta) * beta_d;...
    0 0 0 0 0 0 ml * l^2 * sin(alpha) * cos(beta) * beta_d ml ...
    * l^2 * sin(alpha) * cos(beta) * alpha_d];
g = 9.8;
G = [0 0 (M_quad + ml) * g 0 0 0 ml * l * g * sin(alpha) 0]';
b11 = sin(alpha) * sin(psi) + cos(psi)* cos(phi) * sin(theta);
b21 = sin(psi)* cos(phi) * sin(theta) - cos(psi) * sin(phi);
b = [b11 0 0 0;...
    b21 0 0 0;...
    cos(theta) * cos(phi) 0 0 0;...
    0 1 0 0;
    0 0 1 0;
    0 0 0 1;
    0 0 0 0;...
    0 0 0 0];
dydt(1:8) = q_d;
u = [u1 u2 u3 u4]';
U = b * u;
dydt(9:16) = -inv(M) * (C * q_d + G) + inv(M) * U;
dydt = simplify(dydt');
P = [p1 p2 p3 p4 p5 p6 p7 p8 ...
    p9 p10 p11 p12 p13 p14 p15 p16]';
syms J real;
Q = eye(8);
J = 1/2 * q' * Q * q + 1/2 * q_d' * Q * q_d + 1/2 * U' * Q * U;
syms H real;
H = (J + P' * dydt);
du1 = diff(H,u1);
sol_u1 = simplify(solve(du1,u1));
du2 = diff(H,u2);
sol_u2 = simplify(solve(du2,u2));
du3 = diff(H,u3);
sol_u3 = simplify(solve(du3,u3));
du4 = diff(H,u4);
sol_u4 = simplify(solve(du4,u4));
u_sol = [sol_u1,sol_u2,sol_u3,sol_u4]';
Dp1 = -diff(H,x);
Dp2 = -diff(H,y);
Dp3 = -diff(H,z);
Dp4 = -diff(H,psi);
Dp5 = -diff(H,theta);
Dp6 = -diff(H,phi);
Dp7 = -diff(H,alpha);
Dp8 = -diff(H,beta);
Dp9 = -diff(H,x_d);
Dp10 = -diff(H,y_d);
Dp11 = -diff(H,z_d);
Dp12 = -diff(H,psi_d);
Dp13 = -diff(H,theta_d);
Dp14 = -diff(H,phi_d);
Dp15 = -diff(H,alpha_d);
Dp16 = -diff(H,beta_d);
Dp = [Dp1 Dp2 Dp3 Dp4 Dp5 Dp6 Dp7 ...
    Dp8 Dp9 Dp10 Dp11 Dp12 Dp13 Dp14 Dp15 Dp16]';
dHdu1 = diff(H,u1);
dHdu2 = diff(H,u2);
dHdu3 = diff(H,u3);
dHdu4 = diff(H,u4);
%% 
u_sol = [1 1 1 1]'; % Initial Guess for control input 
t0 = 0;
tf = 20;
init_guess = [1.5 -2 2 0 0 0 0 0 zeros(1,8)];
sol = ode45(@(t,y) pd(t,y,u_sol,Dp), [t0,tf], init_guess);
%%
%Optimization Loop
max_iter = 15;
t0 = 0;
tf = 10;
solinit = bvpinit(linspace(t0,tf,100),zeros(1,16));
sol = bvp4c(@(t, y) stateEqn(t, y, u_sol), @BVP_bc, solinit);
epsilon = 1e-2;
for iter = 1:max_iter
    solinit = bvpinit(linspace(t0,tf,100),zeros(1,32));
    sol = bvp4c(@(t, y) stateEqn(t, y, u_sol), @BVP_bc, solinit);
end

function dydt = stateEqn(t,xx,u_sol)
dydt = zeros(16,1);
x = xx(1);
y = xx(2);
z = xx(3);
psi = xx(4);
theta = xx(5);
phi = xx(6);
alpha = xx(7);
beta = xx(8);
x_d = xx(9);
y_d = xx(10);
z_d = xx(11);
psi_d = xx(12);
theta_d = xx(13);
phi_d = xx(14);
alpha_d = xx(15);
beta_d = xx(16);
q = [x y z psi theta phi  alpha beta]';
zeta = [x y z]';
neta = [psi theta phi]';
miu = [alpha beta]';
q_d = [x_d y_d z_d psi_d theta_d phi_d  alpha_d beta_d]';
zeta_d = [x_d y_d z_d]';
neta_d = [psi_d theta_d phi_d]';
miu_d = [alpha_d beta_d]';
ml = 0.3; % Mass of the load
M_quad = 0.56; % Mass of the quadrotor
l = 0.242; % Length of the quadrotor 
m11 = M_quad + ml;
m22 = m11;
m33 = m11;
m17 = ml * l * cos(alpha) * sin(beta);
m71 = m17;
m18 = -ml * l * sin(alpha) * sin(beta);
m81 = m18;
m27 = ml * l * cos(alpha) * sin(beta);
m72 = m27;
m28 = ml * l * sin(alpha) * cos(beta);
m82 = m28;
m37 = ml * l * sin(alpha);
m73 = m37;
I_psi = 2.1e-3;
I_theta = 6.78e-3;
I_phi = 6.78e-3;

m44 = I_psi * sin(theta)^2 + cos(theta)^2 * (I_theta * sin(theta)^2 ...
    + I_phi * cos(phi)^2);
m45 = (I_theta - I_phi)* (cos(theta) * sin(phi) * cos(phi));
m54 = m45;
m55 = I_theta * cos(phi)^2 + I_phi * sin(phi)^2;
m77 = ml * l^2;
m88 = ml * l^2 * sin(alpha)^2;
M = [m11 0 0 0 0 0 m17 m18; ...
    0 m22 0 0 0 0 m27 m28; ...
    0 0 m33 0 0 0 m37 0; ...
    0 0 0 m44 m45 -I_psi * sin(alpha) 0 0;...
    0 0 0 m54 m55 0 0 0;...
    0 0 0 -I_psi * sin(theta) 0 I_psi 0 0;...
    m71 m72 m73 0 0 0 m77 0;...
    m81 m82 0 0 0 0 0 m88];
c17 = -ml * l * (cos(alpha) * sin(beta) * beta_d + sin(alpha)...
    * cos(beta) * alpha_d);
c18 = -ml * l *(cos(alpha) * sin(beta) * alpha_d + sin(alpha)...
    * cos(beta) * beta_d);
c27 = ml * l * (cos(alpha) * cos(beta) * beta_d - sin(alpha) ...
     * sin(beta) * alpha_d);
c28 = ml * l * (cos(alpha) * cos(beta) * alpha_d - sin(alpha) ...
     * sin(beta) * beta_d);
c44 = I_psi * theta_d * sin(theta) * cos(theta) - (I_theta + ...
    I_phi) * (theta_d * sin(theta) * cos(theta) * sin(theta)^2);
c45 = I_psi * psi_d * sin(theta) * cos(theta) - (I_theta + I_phi)...
    *(psi_d^2 * sin(theta) * cos(theta) * cos(theta)^2 - phi_d * ...
    cos(theta) * cos(phi)^2);
c46 = -(I_psi * theta_d * cos(theta));
c54 = psi_d * sin(theta) * cos(theta) * (-I_psi + I_theta * sin(theta)^2 ...
    + I_phi * cos(phi)^2);
c55 = 0;
c56 = I_psi * psi_d * cos(theta);
c64 = 0;
c65 = -I_psi * psi_d * cos(theta);
C = [0 0 0 0 0 0 c17 c18;...
    0 0 0 0 0 0 c27 c28; ...
    0 0 0 0 0 0 ml * l * cos(alpha) * alpha_d 0;...
    0 0 0 c44 c46 c46 0 0;...
    0 0 0 c54 c55 c56 0 0;...
    0 0 0 c64 c65 0 0 0;...
    0 0 0 0 0 0 0 -ml * l^2 * sin(alpha) * cos(beta) * beta_d;...
    0 0 0 0 0 0 ml * l^2 * sin(alpha) * cos(beta) * beta_d ml ...
    * l^2 * sin(alpha) * cos(beta) * alpha_d];
g = 9.8;
G = [0 0 (M_quad + ml) * g 0 0 0 ml * l * g * sin(alpha) 0]';
b11 = sin(alpha) * sin(psi) + cos(psi)* cos(phi) * sin(theta);
b21 = sin(psi)* cos(phi) * sin(theta) - cos(psi) * sin(phi);
b = [b11 0 0 0;...
    b21 0 0 0;...
    cos(theta) * cos(phi) 0 0 0;...
    0 1 0 0;
    0 0 1 0;
    0 0 0 1;
    0 0 0 0;...
    0 0 0 0];

U = b * u_sol;
dydt(1) = xx(9);
dydt(2) = xx(10);
dydt(3) = xx(11);
dydt(4) = xx(12);
dydt(5) = xx(13);
dydt(6) = xx(14);
dydt(7) = xx(15);
dydt(8) = xx(16);
dydt(9:16) = -inv(M) * (C * q_d + G) + inv(M) * U;

end
function dp = costateEqn(t,P,u_sol,Dp,xx)
dp = zeros(16,1);
x = xx(1);
y = xx(2);
z = xx(3);
psi = xx(4);
theta = xx(5);
phi = xx(6);
alpha = xx(7);
beta = xx(8);
x_d = xx(9);
y_d = xx(10);
z_d = xx(11);
psi_d = xx(12);
theta_d = xx(13);
phi_d = xx(14);
alpha_d = xx(15);
beta_d = xx(16);
u1 = u_sol(1);
u2 = u_sol(2);
u3 = u_sol(3);
u4 = u_sol(4);
p1 = P(1);
p2 = P(2);
p3 = P(3);
p4 = P(4);
p5 = P(5);
p6 = P(6);
p7 = P(7);
p8 = P(8);
p9 = P(9);
p10 = P(10);
p11 = P(11);
p12 = P(12);
p13 = P(13);
p14 = P(14);
p15 = P(15);
p16 = P(16);
dp = eval(Dp);
end
function [saturatedValue, saturated] = saturate(u, lowerLimit, upperLimit)
    % Saturation function to constrain the variable 'u' between 'lowerLimit' and 'upperLimit'
    
    % Check if 'u' is below the lower limit
    if u < lowerLimit
        saturatedValue = lowerLimit;
        saturated = true;
    % Check if 'u' is above the upper limit
    elseif u > upperLimit
        saturatedValue = upperLimit;
        saturated = true;
    % If 'u' is within the limits, no saturation needed
    else
        saturatedValue = u;
        saturated = false;
    end
end

function res = BVP_bc(ya,yb)
global Dp;

res = [ ya(1) - 1.5
ya(2) + 2
ya(3) - 2
ya(4) - 0
ya(5) - 0
ya(6) - 0
ya(7) - 0
ya(8) - 0

yb(1) + 1
yb(2) - 2
yb(3) - 2.5
yb(4) - 0
yb(5) - 0
yb(6) - 0
yb(7) - 0
yb(8) - 0];
end
